This is a simple demo, demonstrating register reads and writes, and use of the
FPGA->CPU and CPU->FPGA message queues.

Building:
  make FPGA=cvgt  # or
  make FPGA=svgx

Programming with USB Blaster:
  make prog

Programming with FPGALink/AVR:
  quartus_cpf -c -q 8MHz -g 2.5 -n p build/fpga.cdf build/fpga.svf
  flcli -v 1d50:602b:0001 -p J:B3B2B0B1:build/fpga.svf


Reconfig without rebooting
--------------------------

On the dev machine:
  make FPGA=...

And on the test machine, in the example directory:
  sudo ../../../pcie-driver/rmmod.sh
  sudo ../../../pcie-driver/rmdev.sh
  #
  # FPGA is now safe to reprogram
  #
  sudo ../../../pcie-driver/rescan.sh
  sudo ../../../pcie-driver/insmod.sh
  build/example


Config-via-PCIe (TODO: Revisit)
---------------

On the dev machine, create a gt-out/gt.core.rbf file:
  quartus_cpf -c gt.cof

Now, on the test machine, in the pcie-driver directory:
  ./rmmod.sh                                  # remove our driver
  cd -                                        # back to altera_cvp driver directory
  /bin/sh altera_cvp_load                     # load altera_cvp driver
  cp $FOO/gt-out/gt.core.rbf /dev/altera_cvp  # program the core
  rmmod altera_cvp; rm -f /dev/altera_cvp     # remove altera_cvp driver
  cd -                                        # back to our pcie-driver directory
  ./insmod.sh                                 # insert our driver
  ../apps/pcie-regs/example/build/example     # test it


SignalTap
---------

cat signaltap.txt | perl -ane 'if(m/^..........([0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F])h ([01]) ([01]) ([01] [01]) ([0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F])h ([01]) ([01]) ([01] [01]) $/){if($4=="1 1"){$r="$1";}else{$r="                ";}if($8=="1 1"){$t="$5";}else{$t="";}print"$r | $t\n";if($3=="1" || $7=="1"){printf"                 |\n";}}' | less -S
